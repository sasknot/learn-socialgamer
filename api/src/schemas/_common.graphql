type Paging {
  page: Int!
  total: Int!
  size: Int!
  count: Int!
}

scalar Date

type Query {
  mediaList: MediaList!
  mediaRead(id: ID!): Media

  userList(page: Int, size: Int, filters: UserListFilters): UserList!
  userRead(id: ID!): User

  gameList(page: Int, size: Int, filters: GameListFilters): GameList!
  gameRead(id: ID!): Game

  # consoleList(page: Int, size: Int, filters: ConsoleListFilters): ConsoleList!
  # consoleRead(id: ID!): Console
}

type Mutation {
  mediaCreate(data: MediaData!): Media
  mediaDestroy(id: ID!): Boolean

  userCreate(data: UserDataCreate!): User!
  userUpdate(id: ID!, data: UserDataUpdate!): User!
#   userPassword(data: UserDataPassword!): Boolean!
  userDestroy(id: ID!): Boolean!
#   userFriendCreate(data: UserFriendDataCreate!): UserFriend!
#   userFriendUpdate(data: UserFriendDataUpdate!): UserFriend!
#   userFriendDestroy(id: ID!): Boolean!
#   userGameCreate(data: UserGameData!): User!
#   userGameDestroy(id: ID!): Boolean!
#   userConsoleCreate(data: UserConsoleData!): User!
#   userConsoleDestroy(id: ID!): Boolean!

  gameCreate(data: GameData!): Game!
  gameUpdate(id: ID!, data: GameData!): Game!
  gameDestroy(id: ID!): Boolean
#   gameRatingCreate(data: GameRatingData!): GameRating!
#   gameRatingDestroy(id: ID!): Boolean
#   gameCommentCreate(data: GameCommentData!): GameComment!
#   gameCommentDestroy(id: ID!): Boolean

#   consoleCreate(data: ConsoleData!): Console!
#   consoleUpdate(data: ConsoleData!): Console!
#   consoleDestroy(id: ID!): Boolean
}
